#BlueJ class context
comment0.target=Array2D
comment0.text=\r\n\ \ Clase\ que\ guarda\ un\ array\ bidimensional\r\n\ \ y\ permite\ hacer\ ciertas\ operaciones\ sobre\ \u00E9l\r\n
comment1.params=
comment1.target=Array2D()
comment1.text=\r\n\ Constructor\ \ \r\n
comment10.params=c
comment10.target=int\ sumarColumna(int)
comment10.text=\r\n\ @param\ c\ la\ columna\ cuyos\ valores\ hay\ que\ sumar\r\n\ \ \ \ \ \ \ \ \ \ suponemos\ c\ correcto\r\n
comment11.params=
comment11.target=int[]\ sumarFilas()
comment11.text=\r\n\ Calcula\ y\ devuelve\ un\ array\ en\ el\ que\ cada\ elemento\ es\ la\ suma\ de\ las\ filas\ de\ matriz\r\n
comment12.params=
comment12.target=int[]\ sumarColumnas()
comment12.text=\r\n\ Calcula\ y\ devuelve\ un\ array\ en\ el\ que\ cada\ elemento\ es\ la\ suma\ de\ las\ columnas\ de\ matriz\r\n
comment13.params=
comment13.target=int\ sumarDiagonalPrincipal()
comment13.text=\r\n\ @return\ calcula\ y\ devuelve\ la\ suma\ de\ la\ diagonal\ principal\ (suponiendo\ la\r\n\ matriz\ cuadrada)\r\n
comment14.params=
comment14.target=int\ sumarDiagonalSecundaria()
comment14.text=\r\n\ @return\ calcula\ y\ devuelve\ la\ suma\ de\ la\ diagonal\ secundaria\ (suponiendo\ la\r\n\ matriz\ cuadrada)\r\n
comment15.params=
comment15.target=int[][]\ traspuesta()
comment15.text=\r\n\ \ \ 1\ \ 22\ \ 3\ \ \ 44\r\n\ \ \ 3\ \ 7\ \ \ 5\ \ \ 11\r\n\ \ \ 4\ \ 5\ \ \ 6\ \ \ 9\r\n\ \ \ La\ traspuesta\ es\r\n\ \ \ 1\ \ \ 3\ \ \ 4\r\n\ \ \ 22\ \ 7\ \ \ 5\r\n\ \ \ 3\ \ \ 5\ \ \ 6\r\n\ \ \ 44\ \ 11\ \ \ 9\r\n
comment16.params=
comment16.target=int\ columnaSumaMaxima()
comment16.text=\r\n\ Calcula\ y\ devuelve\ la\ posici\u00F3n\ de\ la\ columna\ con\ suma\ m\u00E1xima\r\n\ Puedes\ ayudarte\ del\ m\u00E9todo\ sumarColumna()\r\n
comment17.params=
comment17.target=void\ intercambiar()
comment17.text=\r\n\ Intercambia\ la\ columna\ de\ suma\ m\u00E1xima\ con\ la\ primera\ columna\r\n\ Si\ son\ la\ misma\ no\ hace\ falta\ el\ intercambio\r\n
comment18.params=
comment18.target=int[][]\ arrayRagged()
comment18.text=\r\n\ \ Devuelve\ un\ ragged\ array\ donde\ la\ 1\u00AA\ fila\r\n\ \ contiene\ el\ primer\ elemento\ de\ la\ 1\u00AA\ fila\ de\ matriz,\r\n\ \ la\ 2\u00AA\ fila\ los\ 2\ primeros\ elementos\ de\ la\ 2\u00AA\ fila\ de\ matriz,\ \r\n\ \ la\ 3\u00AA\ fila\ los\ 3\ primeros\ elementos\ de\ la\ 3\u00AA\ fila\ de\ matriz,\ ...\r\n\ \ 1\ \ \ 2\ \ \ 3\ \ \ 4\ \ \ \r\n\ \ 14\ \ 5\ \ \ 26\ \ 7\ \ \ \r\n\ \ 17\ \ 8\ \ \ 19\ \ 10\ \ \r\n\ \ 10\ \ 11\ \ 12\ \ 13\ \ \r\n\ \ Resultado\r\n\ \ [1]\r\n\ \ [14,\ 5]\r\n\ \ [17,\ 8,\ 19]\r\n\ \ [10,\ 11,\ 12,\ 13]\r\n\ \ \r\n
comment19.params=
comment19.target=void\ escribirConLlaves()
comment19.text=\r\n\ \ Muestra\ el\ array\ pero\ de\ la\ forma\ indicada.\ Cada\ n\u00BA\ formateado\ a\ 5\ posiciones.\r\n\ \ Usa\ las\ constantes\ definidas\ en\ la\ clase\r\n\ \ \r\n\ \ {\ \ \ {\ \ \ \ 1,\ \ \ \ \ 2,\ \ \ \ \ 3,\ \ \ \ \ 4\ \ \ \ }\r\n\ \ \ \ \ \ {\ \ \ 14,\ \ \ \ \ 5,\ \ \ \ 26,\ \ \ \ \ 7\ \ \ \ }\r\n\ \ \ \ \ \ {\ \ \ 17,\ \ \ \ \ 8,\ \ \ \ 19,\ \ \ \ 10\ \ \ \ }\r\n\ \ \ \ \ \ {\ \ \ 10,\ \ \ \ 11,\ \ \ \ 12,\ \ \ \ 13\ \ \ \ }\ \ \ \ }\r\n\r\n
comment2.params=filas\ columnas
comment2.target=Array2D(int,\ int)
comment2.text=\r\n\ Constructor\ \ -\ crea\ \ un\ array\ de\ 2\ dimensiones\ con\ las\ filas\ y\ columnas\r\n\ indicadas\r\n\ @param\ filas\ \ n\u00BA\ de\ filas\ del\ array\ \r\n\ \ @param\ columnas\ n\u00BA\ de\ columnas\ del\ array\r\n
comment20.params=
comment20.target=int\ contarImpares()
comment20.text=\r\n\ \ Calcula\ y\ devuelve\ el\ total\ de\ impares\ en\ el\ array\r\n\ \ Hay\ que\ hacer\ uso\ del\ m\u00E9todo\ contarImpares(int[],\ int\ n)\r\n\r\n
comment21.params=array\ n
comment21.target=int\ contarImpares(int[],\ int)
comment21.text=\r\n\ \ Cuenta\ los\ impares\ en\ el\ array\ unidimensional\ array\ de\ tama\u00F1o\ n\r\n\ \ \ \r\n\r\n
comment22.params=fila1\ fila2\ col1\ col2
comment22.target=int[][]\ obtenerSubArray(int,\ int,\ int,\ int)
comment22.text=\r\n\ \ Devuelve\ el\ subarray\ obtenido\ a\ partir\ de\ matriz\ entre\ las\ filas\ fila1\ y\ fila2\r\n\ \ y\ columnas\ col1\ y\ col2\ (ambas\ inclusive)\r\n\ \ Asumimos\ todos\ los\ valores\ correctos\r\n\ \ 13\ \ 20\ \ 30\ \ 25\ \ 16\ \ \r\n\ \ 12\ \ 27\ \ 24\ \ 17\ \ 27\ \ \r\n\ \ 3\ \ \ 12\ \ 11\ \ 28\ \ 29\ \ \r\n\ \ 21\ \ 11\ \ 20\ \ 25\ \ 8\ \ \ \r\n\r\n\ \ Subarray\ desde\ filas\ \ 1\ a\ \ 3\ y\ columnas\ 2\ a\ 3\r\n\ \ [24,\ 17]\r\n\ \ [11,\ 28]\r\n\ \ [20,\ 25]\r\n\ \ \r\n\r\n
comment3.params=
comment3.target=void\ inicializar()
comment3.text=\r\n\ \ Inicializa\ la\ matriz\ con\ valores\ aleatorios\ entre\ 3\ y\ 30\ inclusive\r\n\ Usa\ el\ mutador\ setValor\r\n
comment4.params=
comment4.target=int\ getFilas()
comment4.text=\r\n\ @return\ el\ n\u00BA\ total\ de\ filas\ de\ la\ matriz\ \r\n
comment5.params=
comment5.target=int\ getColumnas()
comment5.text=\r\n\ @return\ el\ n\u00BA\ total\ de\ columnas\ de\ la\ matriz\ \r\n
comment6.params=f\ c\ valor
comment6.target=void\ setValor(int,\ int,\ int)
comment6.text=\r\n\ \ deja\ un\ valor\ en\ la\ fila\ y\ columna\ indicadas\ como\ par\u00E1metro\r\n\ \ asumimos\ f\ y\ c\ correctos\r\n\r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\r\n\ \ Representaci\u00F3n\ textual\ de\ la\ matriz\r\n\r\n
comment8.params=
comment8.target=void\ escribir()
comment8.text=\r\n\ \ \r\n\ Escribir\ la\ matriz\ bidimensional\ en\ pantalla\r\n
comment9.params=f
comment9.target=int\ sumarFila(int)
comment9.text=\r\n\ @param\ f\ la\ fila\ cuyos\ valores\ hay\ que\ sumar\r\n\ \ \ \ \ \ \ \ \ \ suponemos\ f\ correcto\r\n
numComments=23
